package com.guyuan.dear.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.guyuan.dear.db.entities.SearchEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SEARCH_ENTITY".
*/
public class SearchEntityDao extends AbstractDao<SearchEntity, Long> {

    public static final String TABLENAME = "SEARCH_ENTITY";

    /**
     * Properties of entity SearchEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, short.class, "type", false, "TYPE");
        public final static Property CreateTime = new Property(3, long.class, "createTime", false, "CREATE_TIME");
        public final static Property PublicId = new Property(4, Long.class, "publicId", false, "PUBLIC_ID");
    }


    public SearchEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SearchEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 3: createTime
                "\"PUBLIC_ID\" INTEGER);"); // 4: publicId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SEARCH_ENTITY_NAME ON \"SEARCH_ENTITY\"" +
                " (\"NAME\" ASC);");
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_SEARCH_ENTITY_NAME_TYPE_DESC ON \"SEARCH_ENTITY\"" +
                " (\"NAME\" ASC,\"TYPE\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getCreateTime());
 
        Long publicId = entity.getPublicId();
        if (publicId != null) {
            stmt.bindLong(5, publicId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getCreateTime());
 
        Long publicId = entity.getPublicId();
        if (publicId != null) {
            stmt.bindLong(5, publicId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SearchEntity readEntity(Cursor cursor, int offset) {
        SearchEntity entity = new SearchEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getShort(offset + 2), // type
            cursor.getLong(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // publicId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getShort(offset + 2));
        entity.setCreateTime(cursor.getLong(offset + 3));
        entity.setPublicId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SearchEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SearchEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SearchEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
