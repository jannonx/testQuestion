package com.guyuan.dear.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.guyuan.dear.db.entities.MeetingsJoinUsersEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MEETINGS_JOIN_USERS_ENTITY".
*/
public class MeetingsJoinUsersEntityDao extends AbstractDao<MeetingsJoinUsersEntity, Long> {

    public static final String TABLENAME = "MEETINGS_JOIN_USERS_ENTITY";

    /**
     * Properties of entity MeetingsJoinUsersEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property MeetingId = new Property(1, long.class, "meetingId", false, "MEETING_ID");
        public final static Property UserId = new Property(2, long.class, "userId", false, "USER_ID");
    }


    public MeetingsJoinUsersEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MeetingsJoinUsersEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEETINGS_JOIN_USERS_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"MEETING_ID\" INTEGER NOT NULL ," + // 1: meetingId
                "\"USER_ID\" INTEGER NOT NULL );"); // 2: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEETINGS_JOIN_USERS_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeetingsJoinUsersEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getMeetingId());
        stmt.bindLong(3, entity.getUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeetingsJoinUsersEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getMeetingId());
        stmt.bindLong(3, entity.getUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MeetingsJoinUsersEntity readEntity(Cursor cursor, int offset) {
        MeetingsJoinUsersEntity entity = new MeetingsJoinUsersEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getLong(offset + 1), // meetingId
            cursor.getLong(offset + 2) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeetingsJoinUsersEntity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMeetingId(cursor.getLong(offset + 1));
        entity.setUserId(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeetingsJoinUsersEntity entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeetingsJoinUsersEntity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MeetingsJoinUsersEntity entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
