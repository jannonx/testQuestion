package com.guyuan.dear.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.guyuan.dear.db.entities.MeetingEntity;
import com.guyuan.dear.db.entities.MeetingsJoinUsersEntity;
import com.guyuan.dear.db.entities.UserEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MEETING_ENTITY".
*/
public class MeetingEntityDao extends AbstractDao<MeetingEntity, Long> {

    public static final String TABLENAME = "MEETING_ENTITY";

    /**
     * Properties of entity MeetingEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HolderId = new Property(0, long.class, "holderId", false, "HOLDER_ID");
        public final static Property MeetingTitle = new Property(1, String.class, "meetingTitle", false, "MEETING_TITLE");
        public final static Property CreateTime = new Property(2, long.class, "createTime", false, "CREATE_TIME");
        public final static Property MeetingId = new Property(3, long.class, "meetingId", true, "_id");
        public final static Property RoomId = new Property(4, long.class, "roomId", false, "ROOM_ID");
        public final static Property IsClosed = new Property(5, boolean.class, "isClosed", false, "IS_CLOSED");
        public final static Property Flag = new Property(6, int.class, "flag", false, "FLAG");
        public final static Property DataOwnerId = new Property(7, long.class, "dataOwnerId", false, "DATA_OWNER_ID");
        public final static Property MeetingTime = new Property(8, long.class, "meetingTime", false, "MEETING_TIME");
    }

    private DaoSession daoSession;

    private Query<MeetingEntity> userEntity_MeetingsQuery;

    public MeetingEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MeetingEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEETING_ENTITY\" (" + //
                "\"HOLDER_ID\" INTEGER NOT NULL ," + // 0: holderId
                "\"MEETING_TITLE\" TEXT," + // 1: meetingTitle
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 2: createTime
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 3: meetingId
                "\"ROOM_ID\" INTEGER NOT NULL ," + // 4: roomId
                "\"IS_CLOSED\" INTEGER NOT NULL ," + // 5: isClosed
                "\"FLAG\" INTEGER NOT NULL ," + // 6: flag
                "\"DATA_OWNER_ID\" INTEGER NOT NULL ," + // 7: dataOwnerId
                "\"MEETING_TIME\" INTEGER NOT NULL );"); // 8: meetingTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MEETING_ENTITY_ROOM_ID ON \"MEETING_ENTITY\"" +
                " (\"ROOM_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEETING_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeetingEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getHolderId());
 
        String meetingTitle = entity.getMeetingTitle();
        if (meetingTitle != null) {
            stmt.bindString(2, meetingTitle);
        }
        stmt.bindLong(3, entity.getCreateTime());
        stmt.bindLong(4, entity.getMeetingId());
        stmt.bindLong(5, entity.getRoomId());
        stmt.bindLong(6, entity.getIsClosed() ? 1L: 0L);
        stmt.bindLong(7, entity.getFlag());
        stmt.bindLong(8, entity.getDataOwnerId());
        stmt.bindLong(9, entity.getMeetingTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeetingEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getHolderId());
 
        String meetingTitle = entity.getMeetingTitle();
        if (meetingTitle != null) {
            stmt.bindString(2, meetingTitle);
        }
        stmt.bindLong(3, entity.getCreateTime());
        stmt.bindLong(4, entity.getMeetingId());
        stmt.bindLong(5, entity.getRoomId());
        stmt.bindLong(6, entity.getIsClosed() ? 1L: 0L);
        stmt.bindLong(7, entity.getFlag());
        stmt.bindLong(8, entity.getDataOwnerId());
        stmt.bindLong(9, entity.getMeetingTime());
    }

    @Override
    protected final void attachEntity(MeetingEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 3);
    }    

    @Override
    public MeetingEntity readEntity(Cursor cursor, int offset) {
        MeetingEntity entity = new MeetingEntity( //
            cursor.getLong(offset + 0), // holderId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // meetingTitle
            cursor.getLong(offset + 2), // createTime
            cursor.getLong(offset + 3), // meetingId
            cursor.getLong(offset + 4), // roomId
            cursor.getShort(offset + 5) != 0, // isClosed
            cursor.getInt(offset + 6), // flag
            cursor.getLong(offset + 7), // dataOwnerId
            cursor.getLong(offset + 8) // meetingTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeetingEntity entity, int offset) {
        entity.setHolderId(cursor.getLong(offset + 0));
        entity.setMeetingTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.getLong(offset + 2));
        entity.setMeetingId(cursor.getLong(offset + 3));
        entity.setRoomId(cursor.getLong(offset + 4));
        entity.setIsClosed(cursor.getShort(offset + 5) != 0);
        entity.setFlag(cursor.getInt(offset + 6));
        entity.setDataOwnerId(cursor.getLong(offset + 7));
        entity.setMeetingTime(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeetingEntity entity, long rowId) {
        entity.setMeetingId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeetingEntity entity) {
        if(entity != null) {
            return entity.getMeetingId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MeetingEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "meetings" to-many relationship of UserEntity. */
    public List<MeetingEntity> _queryUserEntity_Meetings(long userId) {
        synchronized (this) {
            if (userEntity_MeetingsQuery == null) {
                QueryBuilder<MeetingEntity> queryBuilder = queryBuilder();
                queryBuilder.join(MeetingsJoinUsersEntity.class, MeetingsJoinUsersEntityDao.Properties.MeetingId)
                    .where(MeetingsJoinUsersEntityDao.Properties.UserId.eq(userId));
                userEntity_MeetingsQuery = queryBuilder.build();
            }
        }
        Query<MeetingEntity> query = userEntity_MeetingsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserEntityDao().getAllColumns());
            builder.append(" FROM MEETING_ENTITY T");
            builder.append(" LEFT JOIN USER_ENTITY T0 ON T.\"HOLDER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MeetingEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        MeetingEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserEntity holder = loadCurrentOther(daoSession.getUserEntityDao(), cursor, offset);
         if(holder != null) {
            entity.setHolder(holder);
        }

        return entity;    
    }

    public MeetingEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MeetingEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MeetingEntity> list = new ArrayList<MeetingEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MeetingEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MeetingEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
