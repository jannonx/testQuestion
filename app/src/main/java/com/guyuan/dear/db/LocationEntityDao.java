package com.guyuan.dear.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.guyuan.dear.db.entities.LocationEntity;
import com.guyuan.dear.db.entities.StaffsJoinLocationsEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LOCATION_ENTITY".
*/
public class LocationEntityDao extends AbstractDao<LocationEntity, Long> {

    public static final String TABLENAME = "LOCATION_ENTITY";

    /**
     * Properties of entity LocationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Level = new Property(2, int.class, "level", false, "LEVEL");
        public final static Property SortOrder = new Property(3, int.class, "sortOrder", false, "SORT_ORDER");
    }

    private DaoSession daoSession;

    private Query<LocationEntity> staffEntity_LocationsQuery;

    public LocationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public LocationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"LEVEL\" INTEGER NOT NULL ," + // 2: level
                "\"SORT_ORDER\" INTEGER NOT NULL );"); // 3: sortOrder
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getLevel());
        stmt.bindLong(4, entity.getSortOrder());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getLevel());
        stmt.bindLong(4, entity.getSortOrder());
    }

    @Override
    protected final void attachEntity(LocationEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocationEntity readEntity(Cursor cursor, int offset) {
        LocationEntity entity = new LocationEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // level
            cursor.getInt(offset + 3) // sortOrder
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocationEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLevel(cursor.getInt(offset + 2));
        entity.setSortOrder(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocationEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocationEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocationEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "locations" to-many relationship of StaffEntity. */
    public List<LocationEntity> _queryStaffEntity_Locations(long staffId) {
        synchronized (this) {
            if (staffEntity_LocationsQuery == null) {
                QueryBuilder<LocationEntity> queryBuilder = queryBuilder();
                queryBuilder.join(StaffsJoinLocationsEntity.class, StaffsJoinLocationsEntityDao.Properties.LocationId)
                    .where(StaffsJoinLocationsEntityDao.Properties.StaffId.eq(staffId));
                staffEntity_LocationsQuery = queryBuilder.build();
            }
        }
        Query<LocationEntity> query = staffEntity_LocationsQuery.forCurrentThread();
        query.setParameter(0, staffId);
        return query.list();
    }

}
